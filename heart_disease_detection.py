# -*- coding: utf-8 -*-
"""Heart disease detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ORTXgETF-_ym6friBZNPwrWItbRw4_K5
"""



from google.colab import drive
drive.mount('/content/drive')

"""Important Reference Links:-


* [Guide to statistical description (data.decsribe() method)](https://towardsdatascience.com/how-do-we-describe-data-9ce688943c8e)
*  [Linear Regression](https://machinelearningmastery.com/linear-regression-for-machine-learning/)

Importing the dependencies 


*   numpy is used to handle the multidimensional arrays
*   pandas is used to handle the data in the form of dataframes(structured data)
*   train_test.split is used to split the data in two different datasets , one is for training the model and other for testing .
*   Logistic Regression is the model in which we fetch the data for training. We used this model because it is apt for binary classification . In this case, We have two option either heart diseased or not.
*   accuracy_score is used to test how well our model is working.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from operator import add
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix

class color:
   PURPLE = '\033[95m'
   CYAN = '\033[96m'
   DARKCYAN = '\033[36m'
   BLUE = '\033[94m'
   GREEN = '\033[92m'
   YELLOW = '\033[93m'
   RED = '\033[91m'
   BOLD = '\033[1m'
   UNDERLINE = '\033[4m'
   END = '\033[0m'

"""Data collection & Data Pre-processing"""

## loading csv data into pandas dataframe
raw_data=pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Heart disease prediction/heart.csv')

## printing the data
raw_data.head(20)

## getting the number of rows and columns
raw_data.shape

## getting the detailed information about dataset
raw_data.info()

## checking for null values
raw_data.isnull().sum()

sns.heatmap(raw_data.isnull(), cbar=False)

# plot histogram to see the distribution of the data
fig = plt.figure(figsize = (15,20))
ax = fig.gca()
raw_data.hist(ax = ax)
plt.show()

## getting detailed statistical information about the dataset
raw_data.describe()

## checking the distribution of target column ( How many are suffereing from heart disease and how many are not)
raw_data['target'].value_counts()

"""0 --> Represents non defective heart 

---
1 --> Represents defective heart
"""

plt.figure(figsize=(15,6))
sns.countplot(x='age',data = raw_data, hue = 'target',palette='husl')
plt.show()

"""Checking how many values in Target column are of the type Int"""

raw_data['target'].map(type) == int

def stacked_barchart(data, title = None, ylabel = None, xlabel = None):
    default_colors = ['#008080', '#5f3c41', '#219AD8']
    # From raw value to percentage
    totals = data.sum(axis=1)
    bars = ((data.T / totals) * 100).T
    r = list(range(data.index.size))

    # Plot
    barWidth = 0.95
    names = data.index.tolist()
    bottom = [0] * bars.shape[0]

    # Create bars
    color_index = 0
    plots = []
    for bar in bars.columns:
        plots.append(plt.bar(r, bars[bar], bottom=bottom, color=default_colors[color_index], edgecolor='white', width=barWidth))
        bottom = list(map(add, bottom, bars[bar]))
        color_index = 0 if color_index >= len(default_colors) else color_index + 1

    # Custom x axis
    plt.title(title)
    plt.xticks(r, names)
    plt.xlabel(data.index.name if xlabel is None else xlabel)
    plt.ylabel(data.columns.name if ylabel is None else ylabel)
    ax = plt.gca()
        
    y_labels = ax.get_yticks()
    ax.set_yticklabels([str(y) + '%' for y in y_labels])

    flat_list = [item for sublist in data.T.values for item in sublist]
    for i, d in zip(ax.patches, flat_list):
        data_label = str(d) + " (" + str(round(i.get_height(), 2)) + "%)"
        ax.text(i.get_x() + 0.45, i.get_y() + 5, data_label, horizontalalignment='center', verticalalignment='center', fontdict = dict(color = 'white', size = 20))

    for item in ([ax.title]):
        item.set_fontsize(27)
        
    for item in ([ax.xaxis.label, ax.yaxis.label] + ax.get_xticklabels() + ax.get_yticklabels()):
        item.set_fontsize(24)
    
    legend = ax.legend(plots, bars.columns.tolist(), fancybox=True)
    plt.setp(legend.get_texts(), fontsize='20')

fig = plt.gcf()
fig.set_size_inches(25, 35)
grid_rows = 3
grid_cols = 2

#draw sex vs disease outcome
plt.subplot(grid_rows, grid_cols, 1)
temp = raw_data[['sex','target']].groupby(['sex','target']).size().unstack('target')
temp.rename(index={0:'Female', 1:'Male'}, columns={0:'No Disease', 1:'Has Disease'}, inplace = True)
stacked_barchart(temp, title = 'Disease Risk vs Sex', ylabel = 'Population')

"""Splitting the Target & Features as two seperate variables X and Y"""

## splitting the columns in two diffrent variables
X=raw_data.drop(columns='target', axis=1)
Y=raw_data['target']

print(X)
print(Y)

"""Splitting the dataframe into two groups ( Training & Testing)

"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

print(Y.shape,Y_train.shape,Y_test.shape)

"""Training the Model 
We are choosing Logistic Regression model for training the dataset as it is good for binary classification.

[Detailed Explanation](https://towardsdatascience.com/logistic-regression-detailed-overview-46c4da4303bc)
"""

model=LogisticRegression()

model.fit(X_train,Y_train)

"""Evaluation of Model"""

# Evaluation of Model using accuracy_score function from sklearn library

## accuracy score on training data
training_prediction=model.predict(X_train)
training_accuracy_score=accuracy_score(training_prediction,Y_train)

print(training_accuracy_score)

## accuracy score on testing data
testing_prediction=model.predict(X_test)
testing_accuracy_score=accuracy_score(testing_prediction,Y_test)

print(testing_accuracy_score)

confusion_matrix(testing_prediction,Y_test)

confusion_matrix(training_prediction,Y_train)

"""Here we have little difference in the accuracy score of training and testing data . So we can say that model is trained well . It is not over-fitted

## Saving the trained model using pickel module
"""

# loading library
import pickle

# create an iterator object with write permission - model.pkl
with open('model_pkl', 'wb') as files:
    pickle.dump(model, files)

"""### Predictive System



"""

# load saved model
with open('model_pkl' , 'rb') as f:
    lr = pickle.load(f)

# Taking the input from user 64,1,3,110,211,0,0,144,1,1.8,1,0,2,1
print("Please enter the following detail")
input_data=(int(input("Age:-\n")),
            int(input("Gender:-\n0 for Female \n1 for male")),
            int(input("Chest Pain measurefrom 0-4\n0-->No Pain 4--> Severe pain:-\n")),
            int(input("Resting Blood Pressure value:-\n")),
            int(input("Cholestrol Value:-\n")),
            int(input("Fasting Blood Sugar:-\n")),
            int(input("Rest ECG:-\n")),
            int(input("Max Heart Rate:-\n")),
            int(input("Exercised induced Agina:-\n")),
            float(input("ST Depression:-\n")),
            int(input("The slope of the peak exercise ST segment:-\n")),
            int(input("Number of major vessels (0-3) colored by flourosopy:-\n")),
            int(input("Thalessemia Value:- \n thal: 3 = normal; 6 = fixed defect; 7 = reversable defect\n"))
            )

print(input_data)

input_data_as_numpy= np.asarray(input_data)

input_data_reshaped=input_data_as_numpy.reshape(1,-1)
prediction=model.predict(input_data_reshaped)
print(prediction)
if(prediction[0]==0):
    print(color.BOLD+color.GREEN+"\n\n*********************************************\nThe person's heart is healthy :)\n*********************************************\n\n"+color.END)
else:
    print(color.BOLD+color.RED+"\n\n*********************************************\nThe person is suffering from heart disease :(\n*********************************************\n\n"+color.END)

!pip freeze> requirements.txt

"""# Deployement Using Flask"""

!pip install flask-ngrok
!pip install flask-bootstrap

from flask_ngrok import run_with_ngrok
from flask import Flask, render_template , request 
import os
from google.colab import drive
drive.mount('/content/gdrive')
PEOPLE_FOLDER = os.path.join('static', 'people_photo')
app = Flask(__name__, template_folder='/content/static')
app.config['UPLOAD_FOLDER'] = PEOPLE_FOLDER
run_with_ngrok(app)
@app.route('/')
def home():
  full_filename = os.path.join(app.config['UPLOAD_FOLDER'], 'Shovon.jpg')
  return render_template('Webp.html',user_image = full_filename)
if __name__ == '__main__':
   app.run()